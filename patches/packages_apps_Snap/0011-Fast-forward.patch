From 6f3f3aa419fb2d19c2fcf5688ba854527199d8f7 Mon Sep 17 00:00:00 2001
From: maniacx <macs18max@gmail.com>
Date: Fri, 18 May 2018 06:37:36 +0400
Subject: [PATCH 11/14] Fast forward

Change-Id: I6ebab52e530a2a4ae61c4bae4396268c473924e8
---
 res/values/qcomarrays.xml                  |  34 +-
 res/values/qcomstrings.xml                 |  35 +-
 res/values/strings.xml                     |  26 ++
 res/xml/video_preferences.xml              |   7 +
 src/com/android/camera/CameraSettings.java |  12 +-
 src/com/android/camera/VideoMenu.java      | 169 +++------
 src/com/android/camera/VideoModule.java    | 541 ++++++++---------------------
 src/com/android/camera/VideoUI.java        |  28 ++
 8 files changed, 312 insertions(+), 540 deletions(-)

diff --git a/res/values/qcomarrays.xml b/res/values/qcomarrays.xml
index d98ff1a..ae8b039 100755
--- a/res/values/qcomarrays.xml
+++ b/res/values/qcomarrays.xml
@@ -285,8 +285,8 @@
 
     <!-- DIS dialog box entries -->
     <string-array name="pref_camera_dis_entries">
-        <item>@string/pref_camera_dis_entry_off</item>
-        <item>@string/pref_camera_dis_entry_on</item>
+        <item>@string/pref_camera_dis_entry_disable</item>
+        <item>@string/pref_camera_dis_entry_enable</item>
     </string-array>
 
     <!-- Do not localize entryvalues -->
@@ -295,6 +295,18 @@
         <item>@string/pref_camera_dis_value_enable</item>
     </string-array>
 
+    <!-- Fast FPS dialog box entries -->
+    <string-array name="pref_camera_fast_fps_entries">
+        <item>@string/pref_camera_fast_fps_entry_disable</item>
+        <item>@string/pref_camera_fast_fps_entry_enable</item>
+    </string-array>
+
+    <!-- Do not localize entryvalues -->
+    <string-array name="pref_camera_fast_fps_entryvalues">
+        <item>@string/pref_camera_fast_fps_value_disable</item>
+        <item>@string/pref_camera_fast_fps_value_enable</item>
+    </string-array>
+
     <!-- Face Recognition dialog box entries -->
     <string-array name="pref_camera_facerc_entries">
         <item>@string/pref_camera_facerc_entry_off</item>
@@ -440,27 +452,13 @@
      <!-- Video Preferences High Frame Rate dialog box entries -->
      <string-array name="pref_camera_hfr_entries">
           <item>@string/pref_camera_hfr_entry_off</item>
-          <item>@string/pref_camera_hfr_entry_2x</item>
-          <item>@string/pref_camera_hfr_entry_3x</item>
-          <item>@string/pref_camera_hfr_entry_4x</item>
-          <item>@string/pref_camera_hfr_entry_8x</item>
-          <item>@string/pref_camera_hfr_entry_hsr_60</item>
-          <item>@string/pref_camera_hfr_entry_hsr_90</item>
-          <item>@string/pref_camera_hfr_entry_hsr_120</item>
-          <item>@string/pref_camera_hfr_entry_hsr_240</item>
+          <item>@string/pref_camera_hfr_entry_on</item>
      </string-array>
 
      <!-- Do not localize entryvalues -->
      <string-array name="pref_camera_hfr_entryvalues">
           <item>@string/pref_camera_hfr_value_off</item>
-          <item>@string/pref_camera_hfr_value_2x</item>
-          <item>@string/pref_camera_hfr_value_3x</item>
-          <item>@string/pref_camera_hfr_value_4x</item>
-          <item>@string/pref_camera_hfr_value_8x</item>
-          <item>@string/pref_camera_hfr_value_hsr_60</item>
-          <item>@string/pref_camera_hfr_value_hsr_90</item>
-          <item>@string/pref_camera_hfr_value_hsr_120</item>
-          <item>@string/pref_camera_hfr_value_hsr_240</item>
+          <item>@string/pref_camera_hfr_value_on</item>
      </string-array>
 
      <!-- Video Preferences Noise Reduction dialog box entries -->
diff --git a/res/values/qcomstrings.xml b/res/values/qcomstrings.xml
index a86d6fc..4af1601 100755
--- a/res/values/qcomstrings.xml
+++ b/res/values/qcomstrings.xml
@@ -377,29 +377,15 @@
     <string name="pref_camera_hfr_default" translatable="false">off</string>
 
     <!-- Settings screen, Select hfr title -->
-    <string name="pref_camera_hfr_title">High-framerate recording</string>
+    <string name="pref_camera_hfr_title">Slow motion (720p only)</string>
 
     <!-- Settings screen, hfr radio button choices -->
     <string name="pref_camera_hfr_entry_off">Off</string>
-    <string name="pref_camera_hfr_entry_2x">Slow motion 60 FPS</string>
-    <string name="pref_camera_hfr_entry_3x">Slow motion 90 FPS</string>
-    <string name="pref_camera_hfr_entry_4x">Slow motion 120 FPS</string>
-    <string name="pref_camera_hfr_entry_8x">Slow motion 240 FPS</string>
-    <string name="pref_camera_hfr_entry_hsr_60">High speed 60 FPS</string>
-    <string name="pref_camera_hfr_entry_hsr_90">High speed 90 FPS</string>
-    <string name="pref_camera_hfr_entry_hsr_120">High speed 120 FPS</string>
-    <string name="pref_camera_hfr_entry_hsr_240">High speed 240 FPS</string>
+    <string name="pref_camera_hfr_entry_on">On</string>
 
     <!-- HFR entry values. Do not translate. -->
     <string name="pref_camera_hfr_value_off" translatable="false">off</string>
-    <string name="pref_camera_hfr_value_2x" translatable="false">hfr60</string>
-    <string name="pref_camera_hfr_value_3x" translatable="false">hfr90</string>
-    <string name="pref_camera_hfr_value_4x" translatable="false">hfr120</string>
-    <string name="pref_camera_hfr_value_8x" translatable="false">hfr240</string>
-    <string name="pref_camera_hfr_value_hsr_60" translatable="false">hsr60</string>
-    <string name="pref_camera_hfr_value_hsr_90" translatable="false">hsr90</string>
-    <string name="pref_camera_hfr_value_hsr_120" translatable="false">hsr120</string>
-    <string name="pref_camera_hfr_value_hsr_240" translatable="false">hsr240</string>
+    <string name="pref_camera_hfr_value_on" translatable="false">hfr120</string>
 
     <!-- Default noise reduction setting. Do not translate. -->
     <string name="pref_camera_noise_reduction_default" translatable="false">off</string>
@@ -550,12 +536,23 @@
     <string name="pref_camera_dis_default" translatable="false">off</string>
 
     <!-- DIS choices -->
-    <string name="pref_camera_dis_entry_off">Off</string>
-    <string name="pref_camera_dis_entry_on">On</string>
+    <string name="pref_camera_dis_entry_disable">Off</string>
+    <string name="pref_camera_dis_entry_enable">On</string>
 
     <string name="pref_camera_dis_value_disable" translatable="false">off</string>
     <string name="pref_camera_dis_value_enable" translatable="false">on</string>
 
+    <!-- Select fast fps title -->
+    <string name="pref_camera_fast_fps_title">60FPS mode (1080p only)</string>
+    <string name="pref_camera_fast_fps_default" translatable="false">-1</string>
+
+    <!-- Fastfps choices -->
+    <string name="pref_camera_fast_fps_entry_disable">Off</string>
+    <string name="pref_camera_fast_fps_entry_enable">On</string>
+
+    <string name="pref_camera_fast_fps_value_disable" translatable="false">-1</string>
+    <string name="pref_camera_fast_fps_value_enable" translatable="false">1</string>
+
     <!-- Select Face Recognition title -->
     <string name="pref_camera_facerc_title">Face recognition</string>
 
diff --git a/res/values/strings.xml b/res/values/strings.xml
index cb03838..33c9718 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -405,6 +405,32 @@
     <!-- Toast after enable Advanced Capture function to inform Continuous Shot has disabled -->
     <string name="advanced_capture_disable_continuous_shot">Advanced capture will disable continuous shot.</string>
 
+    <!-- Toast for Cannot use HDR in Video Stabilization -->
+    <string name="toast_video_dis_disable_vhdr">Cannot use HDR in Stabilization mode. HDR will be disabled.</string>
+
+    <string name="toast_restarting_info">Restart Using switch camera</string>
+
+    <!-- Toast for cannot use Video Stabilization in 1080p only -->
+    <string name="toast_video_enable_dis_1080p">Stabilization works in 1080p only. Stabilization will be disabled</string>
+
+    <!-- Toast for cannot use Video Stabilization in 4K modes -->
+    <string name="toast_video_4k_disable_IS">Cannot use Stabilization in 4K. Stabilization will be disabled</string>
+
+    <!-- Toast for cannot use HDR in 4K modes -->
+    <string name="toast_video_4k_disable_vhdr">Cannot use HDR in 4K. HDR will be disabled.</string>
+
+    <!-- Toast for cannot use Video Stabilization in Slow Motion -->
+    <string name="toast_videohfr_disable_IS">Cannot use Stabilization in Slow Motion. Stabilization will be disabled.</string>
+
+    <!-- Toast for cannot use HDR in Slow Motion -->
+    <string name="toast_videohfr_disable_vhdr">Cannot use HDR in Slow Motion. HDR will be disabled.</string>
+
+    <!-- Toast for cannot use Video Stabilization in 60fps -->
+    <string name="toast_video_ffps_disable_IS">Cannot use Stabilization in 60fps. Stabilization will be disabled.</string>
+
+    <!-- Toast for cannot use HDR in 60fps -->
+    <string name="videoffps_disable_vhdr">Cannot use HDR in 60fps. HDR will be disabled.</string>
+
     <!-- Toast after enable 2k4k video quality to inform IS has disabled -->
     <string name="video_quality_4k_disable_IS">4k video quality will disable image stabilization.</string>
 
diff --git a/res/xml/video_preferences.xml b/res/xml/video_preferences.xml
index e60dbc3..d885ad2 100644
--- a/res/xml/video_preferences.xml
+++ b/res/xml/video_preferences.xml
@@ -123,6 +123,13 @@
             camera:singleIcon="@drawable/ic_settings_stabilization"
             camera:entryValues="@array/pref_camera_dis_entryvalues" />
     <IconListPreference
+            camera:key="pref_camera_fast_fps_key"
+            camera:defaultValue="@string/pref_camera_fast_fps_default"
+            camera:title="@string/pref_camera_fast_fps_title"
+            camera:singleIcon="@drawable/ic_settings_fps"
+            camera:entries="@array/pref_camera_fast_fps_entries"
+            camera:entryValues="@array/pref_camera_fast_fps_entryvalues" />
+    <IconListPreference
             camera:key="pref_camera_filter_mode_key"
             camera:defaultValue="@string/pref_camera_coloreffect_default"
             camera:title="@string/pref_camera_filter_mode_title"
diff --git a/src/com/android/camera/CameraSettings.java b/src/com/android/camera/CameraSettings.java
index 0d38cd4..e714326 100644
--- a/src/com/android/camera/CameraSettings.java
+++ b/src/com/android/camera/CameraSettings.java
@@ -146,7 +146,7 @@ public class CameraSettings {
 
 // Samsung
     public static final String KEY_METERING_MODE = "pref_camera_metering_mode_key";
-
+    public static final String KEY_FAST_FPS = "pref_camera_fast_fps_key";
     private static final String KEY_QC_SUPPORTED_AE_BRACKETING_MODES = "ae-bracket-hdr-values";
     private static final String KEY_QC_SUPPORTED_AF_BRACKETING_MODES = "af-bracket-values";
     private static final String KEY_QC_SUPPORTED_RE_FOCUS_MODES = "re-focus-values";
@@ -204,11 +204,20 @@ public class CameraSettings {
     public static final String KEY_RT_HDR = "rt-hdr";
     public static final String KEY_METERING = "metering";
     public static final String KEY_QC_DIS_MODE = "sw-vdis";
+    public static final String KEY_FAST_FPS_MODE = "fast-fps-mode";
+    public static final String KEY_PREVIEW_FPS_RANGE = "preview-fps-range";
     public static final String KEY_VIDEO_STABILIZATION = "video-stabilization";
+    public static final String KEY_PHASE_AF = "phase-af";
+    public static final String KEY_DYNAMIC_RANGE_CONTROL = "dynamic-range-control";
+    public static final String KEY_OIS = "ois";
 
     public static final String RTHDR_ON = "on";
     public static final String RTHDR_OFF = "off";
     public static final String RTHDR_AUTO = "auto";
+    public static final String FPS_10_30 = "10000,30000";
+    public static final String FPS_30_30 = "30000,30000";
+    public static final String FPS_60_60 = "60000,60000";
+    public static final String FPS_120_120 = "120000,120000";
 
     public static final String KEY_LUMINANCE_CONITION = "luminance-condition";
     public static final String LUMINANCE_CONITION_LOW = "low";
@@ -1097,6 +1106,7 @@ public class CameraSettings {
         ListPreference meteringMode = group.findPreference(KEY_METERING_MODE);
         ListPreference videoHdr = group.findPreference(KEY_VIDEO_HDR);
         ListPreference disMode = group.findPreference(KEY_DIS);
+        ListPreference fastFps = group.findPreference(KEY_FAST_FPS);
         ListPreference cameraHdrPlus = group.findPreference(KEY_CAMERA_HDR_PLUS);
         ListPreference powerShutter = group.findPreference(KEY_POWER_SHUTTER);
         ListPreference videoHfrMode =
diff --git a/src/com/android/camera/VideoMenu.java b/src/com/android/camera/VideoMenu.java
index d2735f9..9e3ca35 100644
--- a/src/com/android/camera/VideoMenu.java
+++ b/src/com/android/camera/VideoMenu.java
@@ -93,9 +93,6 @@ public class VideoMenu extends MenuController
     private static final int CLICK_THRESHOLD = 200;
     private int previewMenuSize;
 
-    private static final boolean PERSIST_4K_NO_LIMIT =
-            android.os.SystemProperties.getBoolean("persist.camcorder.4k.nolimit", false);
-
     public VideoMenu(CameraActivity activity, VideoUI ui) {
         super(activity);
         mUI = ui;
@@ -114,18 +111,17 @@ public class VideoMenu extends MenuController
         // settings popup
         mOtherKeys1 = new String[] {
                 CameraSettings.KEY_VIDEOCAMERA_FLASH_MODE,
-                CameraSettings.KEY_RECORD_LOCATION,
                 CameraSettings.KEY_VIDEO_QUALITY,
-                CameraSettings.KEY_CAMERA_SAVEPATH,
-                CameraSettings.KEY_EXPOSURE,
-                CameraSettings.KEY_WHITE_BALANCE,
-                CameraSettings.KEY_VIDEOCAMERA_FOCUS_MODE,
-                CameraSettings.KEY_VIDEOCAMERA_FOCUS_TIME,
+                CameraSettings.KEY_FAST_FPS,
                 CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,
                 CameraSettings.KEY_DIS,
                 CameraSettings.KEY_VIDEO_HDR,
+                CameraSettings.KEY_EXPOSURE,
+                CameraSettings.KEY_WHITE_BALANCE,
+                CameraSettings.KEY_MAX_BRIGHTNESS,
                 CameraSettings.KEY_POWER_SHUTTER,
-                CameraSettings.KEY_MAX_BRIGHTNESS
+                CameraSettings.KEY_RECORD_LOCATION,
+                CameraSettings.KEY_CAMERA_SAVEPATH
         };
         mOtherKeys2 = new String[] {
                 CameraSettings.KEY_VIDEOCAMERA_FLASH_MODE,
@@ -689,9 +685,6 @@ public class VideoMenu extends MenuController
     private void overridePreferenceAccessibility() {
         overrideMenuForLocation();
         overrideMenuFor4K();
-        overrideMenuForCDSMode();
-        overrideMenuForSeeMore();
-        overrideMenuForVideoHighFrameRate();
     }
 
     private void overrideMenuForLocation() {
@@ -702,117 +695,67 @@ public class VideoMenu extends MenuController
         }
     }
     private void overrideMenuFor4K() {
-        if(mUI.is4KEnabled() && !PERSIST_4K_NO_LIMIT) {
-
+        if(mUI.is4KEnabled()) {
             mListMenu.setPreferenceEnabled(
                      CameraSettings.KEY_DIS,false);
             mListMenu.overrideSettings(
-                     CameraSettings.KEY_DIS, "disable");
-
+                     CameraSettings.KEY_DIS,
+                        mActivity.getString(R.string.pref_camera_dis_value_disable));
             mListMenu.setPreferenceEnabled(
-                    CameraSettings.KEY_SEE_MORE, false);
+                     CameraSettings.KEY_VIDEO_HDR,false);
             mListMenu.overrideSettings(
-                    CameraSettings.KEY_SEE_MORE, mActivity.getString(R.string.pref_camera_see_more_value_off));
-        }
-    }
-
-    private void overrideMenuForSeeMore() {
-        ListPreference pref_SeeMore = mPreferenceGroup.findPreference(CameraSettings.KEY_SEE_MORE);
-        if(pref_SeeMore != null && pref_SeeMore.getValue() != null
-                && pref_SeeMore.getValue().equals("on")) {
-            mListMenu.setPreferenceEnabled(
-                    CameraSettings.KEY_VIDEO_CDS_MODE,false);
-            mListMenu.setPreferenceEnabled(
-                    CameraSettings.KEY_VIDEO_TNR_MODE, false);
+                     CameraSettings.KEY_VIDEO_HDR,
+                        mActivity.getString(R.string.pref_camera_video_hdr_value_off));
             mListMenu.setPreferenceEnabled(
-                    CameraSettings.KEY_NOISE_REDUCTION, false);
+                     CameraSettings.KEY_FAST_FPS,false);
             mListMenu.overrideSettings(
-                    CameraSettings.KEY_VIDEO_CDS_MODE,
-                    mActivity.getString(R.string.pref_camera_video_cds_value_off),
-                    CameraSettings.KEY_VIDEO_TNR_MODE,
-                    mActivity.getString(R.string.pref_camera_video_tnr_value_off),
-                    CameraSettings.KEY_NOISE_REDUCTION,
-                    mActivity.getString(R.string.pref_camera_noise_reduction_value_off));
-        }
-    }
-
-    private void overrideMenuForCDSMode() {
-
-        ListPreference pref_tnr = mPreferenceGroup.
-                findPreference(CameraSettings.KEY_VIDEO_TNR_MODE);
-        ListPreference pref_cds = mPreferenceGroup.
-                findPreference(CameraSettings.KEY_VIDEO_CDS_MODE);
-        String tnr = (pref_tnr != null) ? pref_tnr.getValue() : null;
-        String cds = (pref_cds != null) ? pref_cds.getValue() : null;
-
-        if (mPrevSavedVideoCDS == null && cds != null) {
-            mPrevSavedVideoCDS = cds;
-        }
-
-        if ((tnr != null) && !tnr.equals("off")) {
+                     CameraSettings.KEY_FAST_FPS,
+                        mActivity.getString(R.string.pref_camera_fast_fps_value_disable));
             mListMenu.setPreferenceEnabled(
-                    CameraSettings.KEY_VIDEO_CDS_MODE,false);
+                     CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,false);
             mListMenu.overrideSettings(
-                    CameraSettings.KEY_VIDEO_CDS_MODE,
-                    mActivity.getString(R.string.pref_camera_video_cds_value_off));
-            mIsVideoTNREnabled = true;
-            if (!mIsVideoCDSUpdated) {
-                if (cds != null) {
-                    mPrevSavedVideoCDS = cds;
-                }
-                mIsVideoCDSUpdated = true;
+                     CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,
+                        mActivity.getString(R.string.pref_camera_hfr_default));
+        } else {
+            if(!mUI.is1080pEnabled()) {
+                mListMenu.setPreferenceEnabled(
+                         CameraSettings.KEY_FAST_FPS,false);
+                mListMenu.overrideSettings(
+                         CameraSettings.KEY_FAST_FPS,
+                            mActivity.getString(R.string.pref_camera_fast_fps_value_disable));
+                mListMenu.setPreferenceEnabled(
+                         CameraSettings.KEY_DIS,false);
+                mListMenu.overrideSettings(
+                         CameraSettings.KEY_DIS,
+                            mActivity.getString(R.string.pref_camera_dis_value_disable));
             }
-        } else if (tnr != null) {
-            mListMenu.setPreferenceEnabled(
-                    CameraSettings.KEY_VIDEO_CDS_MODE,true);
-            if (mIsVideoTNREnabled) {
+            if(!mUI.is720pEnabled()) {
+                mListMenu.setPreferenceEnabled(
+                         CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,false);
                 mListMenu.overrideSettings(
-                        CameraSettings.KEY_VIDEO_CDS_MODE, mPrevSavedVideoCDS);
-                mIsVideoTNREnabled = false;
-                mIsVideoCDSUpdated = false;
+                         CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,
+                            mActivity.getString(R.string.pref_camera_hfr_default));
+            }
+            if(mUI.isHighFPSmode()) {
+                mListMenu.setPreferenceEnabled(
+                         CameraSettings.KEY_DIS,false);
+                mListMenu.overrideSettings(
+                         CameraSettings.KEY_DIS,
+                            mActivity.getString(R.string.pref_camera_dis_value_disable));
+                mListMenu.setPreferenceEnabled(
+                         CameraSettings.KEY_VIDEO_HDR,false);
+                mListMenu.overrideSettings(
+                         CameraSettings.KEY_VIDEO_HDR,
+                            mActivity.getString(R.string.pref_camera_video_hdr_value_off));
+            }
+            if(mUI.isDISmode()) {
+                mListMenu.setPreferenceEnabled(
+                         CameraSettings.KEY_VIDEO_HDR,false);
+                mListMenu.overrideSettings(
+                         CameraSettings.KEY_VIDEO_HDR,
+                            mActivity.getString(R.string.pref_camera_video_hdr_value_off));
             }
         }
-
-    }
-
-    private void overrideMenuForVideoHighFrameRate() {
-        ListPreference disPref = mPreferenceGroup
-                .findPreference(CameraSettings.KEY_DIS);
-        ListPreference frameIntervalPref = mPreferenceGroup
-                .findPreference(CameraSettings.KEY_VIDEO_TIME_LAPSE_FRAME_INTERVAL);
-        ListPreference videoHDRPref = mPreferenceGroup
-                .findPreference(CameraSettings.KEY_VIDEO_HDR);
-        String disMode = disPref == null ? "disable" : disPref.getValue();
-        String videoHDR = videoHDRPref == null ? "off" : videoHDRPref.getValue();
-        String frameIntervalStr = frameIntervalPref.getValue();
-        int timeLapseInterval = Integer.parseInt(frameIntervalStr);
-        int PERSIST_EIS_MAX_FPS =  android.os.SystemProperties
-                .getInt("persist.camcorder.eis.maxfps", 30);
-        ListPreference hfrPref = mPreferenceGroup
-                .findPreference(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE);
-        String highFrameRate;
-        if (hfrPref == null) {
-            //If hfrPref is null, use whitespace instead.
-            highFrameRate = "     ";
-        } else {
-            highFrameRate = hfrPref.getValue();
-        }
-        boolean isHFR = "hfr".equals(highFrameRate.substring(0,3));
-        boolean isHSR = "hsr".equals(highFrameRate.substring(0,3));
-        int rate = 0;
-        if ( isHFR || isHSR ) {
-            String hfrRate = highFrameRate.substring(3);
-            rate = Integer.parseInt(hfrRate);
-        }
-
-        if ((disMode.equals("enable") && rate > PERSIST_EIS_MAX_FPS)
-                || !videoHDR.equals("off")
-                || timeLapseInterval != 0) {
-            mListMenu.setPreferenceEnabled(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE, false);
-            RotateTextToast.makeText(mActivity, R.string.error_app_unsupported_hfr_selection,
-                    Toast.LENGTH_LONG).show();
-        }
-
     }
 
     @Override
@@ -841,14 +784,12 @@ public class VideoMenu extends MenuController
                 R.layout.list_menu, null, false);
         popup1.setSettingChangedListener(this);
         String[] keys = mOtherKeys1;
-        if (mActivity.isDeveloperMenuEnabled())
-            keys = mOtherKeys2;
+
         popup1.initialize(mPreferenceGroup, keys);
 
         mListMenu = popup1;
 
         overridePreferenceAccessibility();
-        overrideMenuForVideoHighFrameRate();
     }
 
     public void popupDismissed(boolean topPopupOnly) {
diff --git a/src/com/android/camera/VideoModule.java b/src/com/android/camera/VideoModule.java
index f27c2ce..06641fb 100644
--- a/src/com/android/camera/VideoModule.java
+++ b/src/com/android/camera/VideoModule.java
@@ -225,6 +225,8 @@ public class VideoModule implements CameraModule,
 
     //settings, which if enabled, need to turn off low power mode
     private boolean mIsFlipEnabled = false;
+    private boolean mIsFastFpsEnabled = false;
+    private boolean mIsHFREnabled = false;
     private boolean mIsDISEnabled = false;
 
     // The preview window is on focus
@@ -239,12 +241,6 @@ public class VideoModule implements CameraModule,
     private static final int MAX_ZOOM = 10;
     private int[] mZoomIdxTbl = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
 
-    private static final boolean PERSIST_4K_NO_LIMIT =
-            android.os.SystemProperties.getBoolean("persist.camcorder.4k.nolimit", false);
-
-    private static final int PERSIST_EIS_MAX_FPS =
-            android.os.SystemProperties.getInt("persist.camcorder.eis.maxfps", 30);
-
     private final MediaSaveService.OnMediaSavedListener mOnVideoSavedListener =
             new MediaSaveService.OnMediaSavedListener() {
                 @Override
@@ -373,6 +369,7 @@ public class VideoModule implements CameraModule,
     private int mVideoEncoder;
     private int mAudioEncoder;
     private boolean mRestartPreview = false;
+    private boolean mRestartCam = false;
     private int videoWidth;
     private int videoHeight;
     boolean mUnsupportedResolution = false;
@@ -1028,8 +1025,7 @@ public class VideoModule implements CameraModule,
         String highFrameRate = mPreferences.getString(
             CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,
             mActivity. getString(R.string.pref_camera_hfr_default));
-        if (("hfr".equals(highFrameRate.substring(0,3))) ||
-                ("hsr".equals(highFrameRate.substring(0,3)))) {
+        if ("hfr".equals(highFrameRate.substring(0,3))) {
             String rate = highFrameRate.substring(3);
             Log.i(TAG,"HFR :"  + highFrameRate + " : rate = " + rate);
             try {
@@ -1068,6 +1064,7 @@ public class VideoModule implements CameraModule,
 
     public boolean is4KEnabled() {
        if (mProfile.quality == CamcorderProfile.QUALITY_2160P ||
+           mProfile.quality == CamcorderProfileWrapper.QUALITY_QHD ||
            mProfile.quality == CamcorderProfile.QUALITY_TIME_LAPSE_2160P ||
            mProfile.quality == CamcorderProfileWrapper.QUALITY_4KDCI ) {
            return true;
@@ -1076,22 +1073,36 @@ public class VideoModule implements CameraModule,
        }
     }
 
-    private boolean is1080pEnabled() {
-       if (mProfile.quality == CamcorderProfile.QUALITY_1080P) {
+    public boolean is1080pEnabled() {
+       if (mProfile.quality == CamcorderProfile.QUALITY_1080P||
+           mProfile.quality == CamcorderProfile.QUALITY_HIGH_SPEED_1080P) {
+           return true;
+       } else {
+           return false;
+       }
+    }
+
+    public boolean is720pEnabled() {
+       if (mProfile.quality == CamcorderProfile.QUALITY_720P||
+           mProfile.quality == CamcorderProfile.QUALITY_HIGH_SPEED_720P) {
            return true;
        } else {
            return false;
        }
     }
 
-    private boolean is720pEnabled() {
-       if (mProfile.quality == CamcorderProfile.QUALITY_720P) {
+    public boolean isHighFPSmode() {
+       if (mIsFastFpsEnabled == true || mIsHFREnabled == true) {
            return true;
        } else {
            return false;
        }
     }
 
+    public boolean isDISmode() {
+           return mIsDISEnabled;
+    }
+
     private boolean isSessionSupportedByEncoder(int w, int h, int fps) {
         int expectedMBsPerSec = w * h * fps;
 
@@ -1118,56 +1129,13 @@ public class VideoModule implements CameraModule,
         return false;
     }
 
-    boolean isHFREnabled(int videoWidth, int videoHeight) {
-        if ((null == mPreferences) || (null == mParameters)) {
-            return false;
-        }
-
-        String HighFrameRate = mPreferences.getString(
-                CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,
-                mActivity. getString(R.string.pref_camera_hfr_default));
-
-        if(!("off".equals(HighFrameRate))) {
-            Size size = null;
-            try {
-                if (isSupported(HighFrameRate.substring(3),
-                        ParametersWrapper.getSupportedVideoHighFrameRateModes(mParameters))) {
-                    int index = ParametersWrapper.
-                            getSupportedVideoHighFrameRateModes(mParameters).indexOf(
-                            HighFrameRate.substring(3));
-                    size = ParametersWrapper.getSupportedHfrSizes(mParameters).get(index);
-                } else {
-                    return false;
-                }
-            } catch (NullPointerException e) {
-                return false;
-            } catch (IndexOutOfBoundsException e) {
-                return false;
-            }
-
-            if (size != null) {
-                if (videoWidth > size.width || videoHeight > size.height) {
-                    return false;
-                }
-            } else {
-                return false;
-            }
-
-            int hfrFps = Integer.parseInt(HighFrameRate.substring(3));
-            return isSessionSupportedByEncoder(videoWidth, videoHeight, hfrFps);
-        }
-
-        return false;
-    }
-
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     private void getDesiredPreviewSize() {
         if (mCameraDevice == null) {
             return;
         }
         mParameters = mCameraDevice.getParameters();
-        if (mParameters.getSupportedVideoSizes() == null ||
-                isHFREnabled(mProfile.videoFrameWidth, mProfile.videoFrameHeight)) {
+        if (mParameters.getSupportedVideoSizes() == null) {
             mDesiredPreviewWidth = mProfile.videoFrameWidth;
             mDesiredPreviewHeight = mProfile.videoFrameHeight;
         } else { // Driver supports separates outputs for preview and video.
@@ -1739,19 +1707,15 @@ public class VideoModule implements CameraModule,
         mCameraDevice.unlock();
         mMediaRecorder.setCamera(mCameraDevice.getCamera());
 
-        String hfr = ParametersWrapper.getVideoHighFrameRate(mParameters);
-        String hsr =  mParameters.get(CameraSettings.KEY_VIDEO_HSR);
-        Log.i(TAG,"NOTE: hfr = " + hfr + " : hsr = " + hsr);
+        String hfr = mParameters.getVideoHighFrameRate();
 
         int captureRate = 0;
         boolean isHFR = (hfr != null && !hfr.equals("off"));
-        boolean isHSR = (hsr != null && !hsr.equals("off"));
 
         try {
-            captureRate = isHFR ? Integer.parseInt(hfr) :
-                    isHSR ? Integer.parseInt(hsr) : 0;
+            captureRate = isHFR ? Integer.parseInt(hfr) : 0;
         } catch (NumberFormatException nfe) {
-            Log.e(TAG, "Invalid hfr(" + hfr + ") or hsr(" + hsr + ")");
+            Log.e(TAG, "Invalid hfr");
         }
 
         mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
@@ -1765,23 +1729,11 @@ public class VideoModule implements CameraModule,
             mProfile.fileFormat = MediaRecorder.OutputFormat.THREE_GPP;
         }
         // Set params individually for HFR case, as we do not want to encode audio
-        if ((isHFR || isHSR) && captureRate > 0) {
-            if (isHSR) {
-                Log.i(TAG, "Enabling audio for HSR");
-                mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
-            }
+        if (isHFR && captureRate > 0) {
             mMediaRecorder.setOutputFormat(mProfile.fileFormat);
             mMediaRecorder.setVideoFrameRate(mProfile.videoFrameRate);
-            mMediaRecorder.setVideoEncodingBitRate(mProfile.videoBitRate *
-                                                ((isHSR ? captureRate : 30) / 30));
+            mMediaRecorder.setVideoEncodingBitRate(mProfile.videoBitRate);
             mMediaRecorder.setVideoEncoder(mProfile.videoCodec);
-            if (isHSR) {
-                Log.i(TAG, "Configuring audio for HSR");
-                mMediaRecorder.setAudioEncodingBitRate(mProfile.audioBitRate);
-                mMediaRecorder.setAudioChannels(mProfile.audioChannels);
-                mMediaRecorder.setAudioSamplingRate(mProfile.audioSampleRate);
-                mMediaRecorder.setAudioEncoder(mProfile.audioCodec);
-            }
         } else {
             if (!mCaptureTimeLapse) {
                 mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
@@ -1799,10 +1751,8 @@ public class VideoModule implements CameraModule,
             Log.i(TAG, "Setting capture-rate = " + captureRate);
             mMediaRecorder.setCaptureRate(captureRate);
 
-            // for HSR, encoder's target-framerate = capture-rate
             // for HFR, encoder's taget-framerate = 30fps (from profile)
-            int targetFrameRate = isHSR ? captureRate :
-                    isHFR ? 30 : mProfile.videoFrameRate;
+            int targetFrameRate = isHFR ? 30 : mProfile.videoFrameRate;
 
             Log.i(TAG, "Setting target fps = " + targetFrameRate);
             mMediaRecorder.setVideoFrameRate(targetFrameRate);
@@ -1811,11 +1761,7 @@ public class VideoModule implements CameraModule,
             // In case framerate is different, scale the bitrate
             int scaledBitrate = getHighSpeedVideoEncoderBitRate(mProfile, targetFrameRate);
             Log.i(TAG, "Scaled Video bitrate : " + scaledBitrate);
-            if (scaledBitrate > 0) {
-                mMediaRecorder.setVideoEncodingBitRate(scaledBitrate);
-            } else {
-                Log.e(TAG, "Cannot set Video bitrate because its negative");
-            }
+            mMediaRecorder.setVideoEncodingBitRate(scaledBitrate);
         }
 
         setRecordLocation();
@@ -2057,30 +2003,6 @@ public class VideoModule implements CameraModule,
             mStartRecPending = false;
             return false;
         }
-
-        if( mUnsupportedHFRVideoSize == true) {
-            Log.e(TAG, "Unsupported HFR and video size combinations");
-            RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_hfr,
-                    Toast.LENGTH_SHORT).show();
-            mStartRecPending = false;
-            return false;
-        }
-
-        if (mUnsupportedHSRVideoSize == true) {
-            Log.e(TAG, "Unsupported HSR and video size combinations");
-            RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_hsr,
-                    Toast.LENGTH_SHORT).show();
-            mStartRecPending = false;
-            return false;
-        }
-
-        if( mUnsupportedHFRVideoCodec == true) {
-            Log.e(TAG, "Unsupported HFR and video codec combinations");
-            RotateTextToast.makeText(mActivity, R.string.error_app_unsupported_hfr_codec,
-                    Toast.LENGTH_SHORT).show();
-            mStartRecPending = false;
-            return false;
-        }
         if (mUnsupportedProfile == true) {
             Log.e(TAG, "Unsupported video profile");
             RotateTextToast.makeText(mActivity, R.string.error_app_unsupported_profile,
@@ -2554,301 +2476,73 @@ public class VideoModule implements CameraModule,
             mParameters.setColorEffect(colorEffect);
         }
 
+        String fastFps = mPreferences.getString(
+                CameraSettings.KEY_FAST_FPS,
+                mActivity.getString(R.string.pref_camera_fast_fps_default));
+
+        String HighFrameRate = mPreferences.getString(
+            CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,
+            mActivity. getString(R.string.pref_camera_hfr_default));
+
         String disMode = mPreferences.getString(
                 CameraSettings.KEY_DIS,
                 mActivity.getString(R.string.pref_camera_dis_default));
-        Log.v(TAG, "DIS value =" + disMode);
-        mIsDISEnabled = disMode.equals("on");
-
-        if (is4KEnabled() && !PERSIST_4K_NO_LIMIT) {
-                mParameters.set(CameraSettings.KEY_QC_DIS_MODE,
-                        mActivity.getString(R.string.pref_camera_dis_value_disable));
-                mUI.overrideSettings(CameraSettings.KEY_DIS,
-                        mActivity.getString(R.string.pref_camera_dis_value_disable));
-                mIsDISEnabled = false;
-        } else {
-            mParameters.set(CameraSettings.KEY_QC_DIS_MODE, disMode);
-        }
-        if(mIsDISEnabled) {
-            mParameters.set(CameraSettings.KEY_VIDEO_STABILIZATION, "true");
-        } else {
-            mParameters.set(CameraSettings.KEY_VIDEO_STABILIZATION, "false");
-        }
-        // Set anti banding parameter.
-        String antiBanding = mPreferences.getString(
-                 CameraSettings.KEY_ANTIBANDING,
-                 mActivity.getString(R.string.pref_camera_antibanding_default));
-        Log.v(TAG, "antiBanding value =" + antiBanding);
-        if (CameraUtil.isSupported(antiBanding, mParameters.getSupportedAntibanding())) {
-            mParameters.setAntibanding(antiBanding);
-        }
 
-        mUnsupportedHFRVideoSize = false;
-        mUnsupportedHFRVideoCodec = false;
-        mUnsupportedHSRVideoSize = false;
-        // To set preview format as YV12 , run command
-        // "adb shell setprop "debug.camera.yv12 true
-        if( PersistUtil.isYv12FormatEnable() ) {
-            Log.v(TAG, "preview format set to YV12");
-            mParameters.setPreviewFormat (ImageFormat.YV12);
-        }
+        String videoHDR = mPreferences.getString(
+                CameraSettings.KEY_VIDEO_HDR,
+                mActivity.getString(R.string.pref_camera_video_hdr_default));
 
+        mRestartPreview = false;
+        mParameters.set(CameraSettings.KEY_QC_DIS_MODE, disMode);
+        mParameters.set(CameraSettings.KEY_RT_HDR,videoHDR);
+        mIsDISEnabled = disMode.equals("on");
+        mIsFastFpsEnabled = fastFps.equals("1");
+        mIsHFREnabled = "hfr".equals(HighFrameRate.substring(0,3));
         mParameters.set(KEY_PREVIEW_FORMAT, FORMAT_NV21);
-        Log.v(TAG, "preview format set to NV21");
-
-        // Set High Frame Rate.
-        String highFrameRate = mPreferences.getString(
-            CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,
-            mActivity. getString(R.string.pref_camera_hfr_default));
-        boolean isHFR = "hfr".equals(highFrameRate.substring(0,3));
-        boolean isHSR = "hsr".equals(highFrameRate.substring(0,3));
-
-        if (isHFR || isHSR) {
-            String hfrRate = highFrameRate.substring(3);
-            if (isHFR) {
-                mUnsupportedHFRVideoSize = true;
-            } else {
-                mUnsupportedHSRVideoSize = true;
-            }
-            String hfrsize = videoWidth+"x"+videoHeight;
-            Log.v(TAG, "current set resolution is : "+hfrsize+ " : Rate is : " + hfrRate );
-            try {
-                Size size = null;
-                if (isSupported(hfrRate,
-                        ParametersWrapper.getSupportedVideoHighFrameRateModes(mParameters))) {
-                    int index = ParametersWrapper.
-                            getSupportedVideoHighFrameRateModes(mParameters).indexOf(hfrRate);
-                    size = ParametersWrapper.getSupportedHfrSizes(mParameters).get(index);
-                }
-                if (size != null) {
-                    if (videoWidth <= size.width && videoHeight <= size.height) {
-                        if (isHFR) {
-                            mUnsupportedHFRVideoSize = false;
-                        } else {
-                            mUnsupportedHSRVideoSize = false;
-                        }
-                        Log.v(TAG,"Current hfr resolution is supported");
-                    }
-                }
-            } catch (NullPointerException e){
-                Log.e(TAG, "supported hfr sizes is null");
-            }
 
-            int hfrFps = Integer.parseInt(hfrRate);
-            if (!isSessionSupportedByEncoder(videoWidth, videoHeight, hfrFps)) {
-                if (isHFR) {
-                            mUnsupportedHFRVideoSize = true;
-                        } else {
-                            mUnsupportedHSRVideoSize = true;
-                        }
-                    }
 
-            if (isHFR) {
-                mParameters.set(CameraSettings.KEY_VIDEO_HSR, "off");
-                if (mUnsupportedHFRVideoSize) {
-                    ParametersWrapper.setVideoHighFrameRate(mParameters, "off");
-                    Log.v(TAG,"Unsupported hfr resolution");
-                } else {
-                    ParametersWrapper.setVideoHighFrameRate(mParameters, hfrRate);
-                }
-            } else {
-                ParametersWrapper.setVideoHighFrameRate(mParameters, "off");
-                if (mUnsupportedHSRVideoSize) {
-                    Log.v(TAG,"Unsupported hsr resolution");
-                    mParameters.set(CameraSettings.KEY_VIDEO_HSR, "off");
-                } else {
-                    mParameters.set(CameraSettings.KEY_VIDEO_HSR, hfrRate);
-                }
-            }
+        if (mIsHFREnabled || mIsFastFpsEnabled) {
+            mParameters.set(CameraSettings.KEY_PHASE_AF, "off");
+            mParameters.set(CameraSettings.KEY_DYNAMIC_RANGE_CONTROL, "off");
         } else {
-            ParametersWrapper.setVideoHighFrameRate(mParameters, "off");
-            mParameters.set(CameraSettings.KEY_VIDEO_HSR, "off");
-        }
-        setFlipValue();
-
-        // Set video CDS
-        String video_cds = mPreferences.getString(
-                CameraSettings.KEY_VIDEO_CDS_MODE,
-                mActivity.getString(R.string.pref_camera_video_cds_default));
-
-        if ((mPrevSavedVideoCDS == null) && (video_cds != null)) {
-            mPrevSavedVideoCDS = video_cds;
+            mParameters.set(CameraSettings.KEY_PHASE_AF, "on");
+            mParameters.set(CameraSettings.KEY_DYNAMIC_RANGE_CONTROL, "on");
         }
-
-        if (mOverrideCDS) {
-            video_cds = mPrevSavedVideoCDS;
-            mOverrideCDS = false;
-        }
-
-        if (CameraUtil.isSupported(video_cds,
-                CameraSettings.getSupportedVideoCDSModes(mParameters))) {
-            mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE, video_cds);
+        if (mIsHFREnabled) {
+            mParameters.setVideoHighFrameRate("hfr120");
+        } else {
+            mParameters.setVideoHighFrameRate("off");
         }
 
-        // Set video TNR
-        String video_tnr = mPreferences.getString(
-                CameraSettings.KEY_VIDEO_TNR_MODE,
-                mActivity.getString(R.string.pref_camera_video_tnr_default));
-        if (CameraUtil.isSupported(video_tnr,
-                CameraSettings.getSupportedVideoTNRModes(mParameters))) {
-            if (!video_tnr.equals(mActivity.getString(R.string.
-                    pref_camera_video_tnr_value_off))) {
-                mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,
-                        mActivity.getString(R.string.pref_camera_video_cds_value_off));
-                mUI.overrideSettings(CameraSettings.KEY_VIDEO_CDS_MODE,
-                        mActivity.getString(R.string.pref_camera_video_cds_value_off));
-                if (!mIsVideoCDSUpdated) {
-                    if (video_cds != null) {
-                        mPrevSavedVideoCDS = mTempVideoCDS;
-                    }
-                    mIsVideoTNREnabled = true;
-                    mIsVideoCDSUpdated = true;
-                }
-            } else if (mIsVideoTNREnabled) {
-                mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE, mPrevSavedVideoCDS);
-                mUI.overrideSettings(CameraSettings.KEY_VIDEO_CDS_MODE, mPrevSavedVideoCDS);
-                mIsVideoTNREnabled = false;
-                mIsVideoCDSUpdated = false;
-                mOverrideCDS = true;
-            } else {
-                mTempVideoCDS = video_cds;
-            }
-            mParameters.set(CameraSettings.KEY_QC_VIDEO_TNR_MODE, video_tnr);
-            mUI.overrideSettings(CameraSettings.KEY_VIDEO_TNR_MODE, video_tnr);
-        }
-
-        String noiseReductionMode = mPreferences.getString(
-                CameraSettings.KEY_NOISE_REDUCTION,
-                mActivity.getString(R.string.pref_camera_noise_reduction_default));
-        Log.v(TAG, "Noise ReductionMode =" + noiseReductionMode);
-
-        if (isSupported(noiseReductionMode,
-                CameraSettings.getSupportedNoiseReductionModes(mParameters))) {
-            /* Disable CDS */
-            if (noiseReductionMode.equals(
-                    mActivity.getString(R.string.pref_camera_noise_reduction_value_high_quality)) &&
-                    video_cds.equals(mActivity.getString(R.string.
-                            pref_camera_video_cds_value_on))) {
-                mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,
-                        mActivity.getString(R.string.pref_camera_video_cds_value_off));
-                mUI.overrideSettings(CameraSettings.KEY_VIDEO_CDS_MODE,
-                        mActivity.getString(R.string.pref_camera_video_cds_value_off));
-                Toast.makeText(mActivity, R.string.disable_CDS_during_HighQualityNoiseReduction,
-                        Toast.LENGTH_LONG).show();
-            }
-
-            /* Disable TNR */
-            if (noiseReductionMode.equals(
-                    mActivity.getString(R.string.pref_camera_noise_reduction_value_high_quality)) &&
-                    video_tnr.equals(mActivity.getString(R.string.
-                            pref_camera_video_tnr_value_on))) {
-                mParameters.set(CameraSettings.KEY_QC_VIDEO_TNR_MODE,
-                        mActivity.getString(R.string.pref_camera_video_tnr_value_off));
-                mUI.overrideSettings(CameraSettings.KEY_VIDEO_TNR_MODE,
-                        mActivity.getString(R.string.pref_camera_video_tnr_value_off));
-                Toast.makeText(mActivity, R.string.disable_TNR_during_HighQualityNoiseReduction,
-                        Toast.LENGTH_LONG).show();
-            }
-
-            /* Set Noise Reduction mode */
-            mParameters.set(CameraSettings.KEY_QC_NOISE_REDUCTION_MODE, noiseReductionMode);
-        }
-
-        String seeMoreMode = mPreferences.getString(
-                CameraSettings.KEY_SEE_MORE,
-                mActivity.getString(R.string.pref_camera_see_more_default));
-        Log.v(TAG, "See More value =" + seeMoreMode);
-
-        if (isSupported(seeMoreMode,
-                CameraSettings.getSupportedSeeMoreModes(mParameters))) {
-            /* Disable CDS */
-            if (seeMoreMode.equals(
-                    mActivity.getString(R.string.pref_camera_see_more_value_on)) &&
-                    video_cds.equals(mActivity.getString(R.string.
-                    pref_camera_video_cds_value_on))) {
-                mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,
-                    mActivity.getString(R.string.pref_camera_video_cds_value_off));
-                mUI.overrideSettings(CameraSettings.KEY_VIDEO_CDS_MODE,
-                    mActivity.getString(R.string.pref_camera_video_cds_value_off));
-                Toast.makeText(mActivity, R.string.disable_CDS_during_SeeMore,
-                    Toast.LENGTH_LONG).show();
-            }
-
-            /* Disable TNR */
-            if (seeMoreMode.equals(
-                    mActivity.getString(R.string.pref_camera_see_more_value_on)) &&
-                    video_tnr.equals(mActivity.getString(R.string.
-                    pref_camera_video_tnr_value_on))) {
-                mParameters.set(CameraSettings.KEY_QC_VIDEO_TNR_MODE,
-                    mActivity.getString(R.string.pref_camera_video_tnr_value_off));
-                mUI.overrideSettings(CameraSettings.KEY_VIDEO_TNR_MODE,
-                    mActivity.getString(R.string.pref_camera_video_tnr_value_off));
-                Toast.makeText(mActivity, R.string.disable_TNR_during_SeeMore,
-                    Toast.LENGTH_LONG).show();
-            }
-
-            /* Disable NR */
-            if (seeMoreMode.equals(
-                    mActivity.getString(R.string.pref_camera_see_more_value_on)) &&
-                    !noiseReductionMode.equals(mActivity.getString(R.string.
-                            pref_camera_noise_reduction_value_off))) {
-                mParameters.set(CameraSettings.KEY_QC_NOISE_REDUCTION_MODE,
-                        mActivity.getString(R.string.pref_camera_noise_reduction_value_off));
-                mUI.overrideSettings(CameraSettings.KEY_NOISE_REDUCTION,
-                        mActivity.getString(R.string.pref_camera_noise_reduction_value_off));
-                Toast.makeText(mActivity, R.string.disable_NR_during_SeeMore,
-                        Toast.LENGTH_LONG).show();
-            }
-            /* Set SeeMore mode */
-            mParameters.set(CameraSettings.KEY_QC_SEE_MORE_MODE, seeMoreMode);
+        if (mIsDISEnabled) {
+            mParameters.set(CameraSettings.KEY_OIS, "matrix");
+            mParameters.set(CameraSettings.KEY_VIDEO_STABILIZATION, "true");
+        } else {
+//            mParameters.set(CameraSettings.KEY_OIS, "still");
+            mParameters.set(CameraSettings.KEY_VIDEO_STABILIZATION, "false");
         }
 
-        // Set Video HDR.
-        String videoHDR = mPreferences.getString(
-                CameraSettings.KEY_VIDEO_HDR,
-                mActivity.getString(R.string.pref_camera_video_hdr_default));
-        Log.v(TAG, "Video HDR Setting =" + videoHDR);
-        mParameters.set(CameraSettings.KEY_RT_HDR,videoHDR);
-
-        //HFR/HSR recording not supported with DIS,TimeLapse,HDR option
-        String hfr = ParametersWrapper.getVideoHighFrameRate(mParameters);
-        String hsr = mParameters.get(CameraSettings.KEY_VIDEO_HSR);
-        String hdr = ParametersWrapper.getVideoHDRMode(mParameters);
-         if ( !"off".equals(highFrameRate) ) {
-             // Read time lapse recording interval.
-             String frameIntervalStr = mPreferences.getString(
-                    CameraSettings.KEY_VIDEO_TIME_LAPSE_FRAME_INTERVAL,
-                    mActivity.getString(R.string.pref_video_time_lapse_frame_interval_default));
-             int timeLapseInterval = Integer.parseInt(frameIntervalStr);
-             int rate = 0;
-             if ( isDigit(highFrameRate.substring(3)) ) {
-                 rate = Integer.parseInt(highFrameRate.substring(3));
-             }
-             Log.v(TAG, "rate = "+rate);
-             if ( (timeLapseInterval != 0) ||
-                  (disMode.equals("on") && (rate > PERSIST_EIS_MAX_FPS)) ||
-                  ((hdr != null) && (!hdr.equals("off"))) ) {
-                Log.v(TAG,"HDR/DIS/Time Lapse ON for HFR/HSR selection, turning HFR/HSR off");
-                ParametersWrapper.setVideoHighFrameRate(mParameters, "off");
-                mParameters.set(CameraSettings.KEY_VIDEO_HSR, "off");
-                mUI.overrideSettings(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE, "off");
-             }
+        if (mIsFastFpsEnabled) {
+            mParameters.set(CameraSettings.KEY_FAST_FPS_MODE, "1");
+            mParameters.set(CameraSettings.KEY_PREVIEW_FPS_RANGE, CameraSettings.FPS_60_60);
+            mParameters.set(CameraSettings.KEY_RT_HDR, CameraSettings.RTHDR_OFF);
+        } else if (mIsHFREnabled) {
+            mParameters.set(CameraSettings.KEY_FAST_FPS_MODE, "2");
+            mParameters.set(CameraSettings.KEY_PREVIEW_FPS_RANGE, CameraSettings.FPS_120_120);
+            mParameters.set(CameraSettings.KEY_RT_HDR, CameraSettings.RTHDR_OFF);
+        } else if (mIsDISEnabled) {
+            mParameters.set(CameraSettings.KEY_FAST_FPS_MODE, "-1");
+            mParameters.set(CameraSettings.KEY_PREVIEW_FPS_RANGE, CameraSettings.FPS_30_30);
+        } else {
+            mParameters.set(CameraSettings.KEY_FAST_FPS_MODE, "-1");
+            mParameters.set(CameraSettings.KEY_PREVIEW_FPS_RANGE, CameraSettings.FPS_10_30);
         }
+        setFlipValue();
 
         //getSupportedPictureSizes will always send a sorted a list in descending order
         Size biggestSize = mParameters.getSupportedPictureSizes().get(0);
 
-        if (biggestSize.width <= videoWidth || biggestSize.height <= videoHeight) {
-            if (disMode.equals("on")) {
-                Log.v(TAG,"DIS is not supported for this video quality");
-                RotateTextToast.makeText(mActivity, R.string.error_app_unsupported_dis,
-                               Toast.LENGTH_LONG).show();
-                mParameters.set(CameraSettings.KEY_QC_DIS_MODE, "off");
-                mUI.overrideSettings(CameraSettings.KEY_DIS, "off");
-                mIsDISEnabled = false;
-            }
-        }
-        //setting video rotation
+         //setting video rotation
         String videoRotation = mPreferences.getString(
             CameraSettings.KEY_VIDEO_ROTATION,
             mActivity.getString(R.string.pref_camera_video_rotation_default));
@@ -3045,8 +2739,19 @@ public class VideoModule implements CameraModule,
 
     @Override
     public void onSharedPreferenceChanged(ListPreference pref) {
-        if (pref != null && CameraSettings.KEY_VIDEO_QUALITY.equals(pref.getKey())
-            && !PERSIST_4K_NO_LIMIT) {
+        if (pref != null && CameraSettings.KEY_DIS.equals(pref.getKey())) {
+            mRestartCam = true;
+            String disvalue = pref.getValue();
+            if (!disvalue.equals(mActivity.getString(R.string.pref_camera_dis_value_disable))) {
+                    String vhdrDisable = mActivity.getString(R.string.pref_camera_video_hdr_value_off);
+                    if (!vhdrDisable.equals(
+                            mPreferences.getString(CameraSettings.KEY_VIDEO_HDR, vhdrDisable))) {
+                        RotateTextToast.makeText(mActivity, R.string.toast_video_dis_disable_vhdr,
+                                Toast.LENGTH_LONG).show();
+                    }
+            }
+        }
+        if (pref != null && CameraSettings.KEY_VIDEO_QUALITY.equals(pref.getKey())) {
             String videoQuality = pref.getValue();
             if (CameraSettings.VIDEO_QUALITY_TABLE.containsKey(videoQuality)) {
                 int quality = CameraSettings.VIDEO_QUALITY_TABLE.get(videoQuality);
@@ -3055,14 +2760,66 @@ public class VideoModule implements CameraModule,
                         || quality == CamcorderProfileWrapper.QUALITY_4KDCI)
                         && mPreferences != null) {
                     String disDisable = mActivity.getString(R.string.pref_camera_dis_value_disable);
+                    String vhdrDisable = mActivity.getString(R.string.pref_camera_video_hdr_value_off);
+                    if (!disDisable.equals(
+                            mPreferences.getString(CameraSettings.KEY_DIS, disDisable))) {
+                        mRestartCam = true;
+                        RotateTextToast.makeText(mActivity, R.string.toast_video_4k_disable_IS,
+                                Toast.LENGTH_LONG).show();
+                    }
+                    if (!vhdrDisable.equals(
+                            mPreferences.getString(CameraSettings.KEY_VIDEO_HDR, vhdrDisable))) {
+                        mRestartCam = true;
+                        RotateTextToast.makeText(mActivity, R.string.toast_video_4k_disable_vhdr,
+                                Toast.LENGTH_LONG).show();
+                    }
+                } else if (quality != CamcorderProfile.QUALITY_1080P) {
+                    String disDisable = mActivity.getString(R.string.pref_camera_dis_value_disable);
                     if (!disDisable.equals(
                             mPreferences.getString(CameraSettings.KEY_DIS, disDisable))) {
-                        RotateTextToast.makeText(mActivity, R.string.video_quality_4k_disable_IS,
+                        mRestartCam = true;
+                        RotateTextToast.makeText(mActivity, R.string.toast_video_enable_dis_1080p,
                                 Toast.LENGTH_LONG).show();
                     }
+                } else if (quality != CamcorderProfile.QUALITY_720P) {
+                    String hfrdisable = mActivity.getString(R.string.pref_camera_hfr_value_off);
+                    if (!hfrdisable.equals(
+                            mPreferences.getString(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE, hfrdisable))) {
+                        mRestartCam = true;
+                    }
                 }
             }
         }
+        if (pref != null && CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE.equals(pref.getKey())) {
+            mRestartCam = true;
+            String hfrvalue = pref.getValue();
+            if (!hfrvalue.equals(mActivity.getString(R.string.pref_camera_hfr_default))) {
+                    String vhdrDisable = mActivity.getString(R.string.pref_camera_video_hdr_value_off);
+                    if (!vhdrDisable.equals(
+                            mPreferences.getString(CameraSettings.KEY_VIDEO_HDR, vhdrDisable))) {
+                        RotateTextToast.makeText(mActivity, R.string.toast_videohfr_disable_vhdr,
+                                Toast.LENGTH_LONG).show();
+                    }
+            }
+        }
+        if (pref != null && CameraSettings.KEY_FAST_FPS.equals(pref.getKey())) {
+            String fastfpsvalue = pref.getValue();
+            if (!fastfpsvalue.equals(mActivity.getString(R.string.pref_camera_fast_fps_value_disable))) {
+                    String disDisable = mActivity.getString(R.string.pref_camera_dis_value_disable);
+                    String vhdrDisable = mActivity.getString(R.string.pref_camera_video_hdr_value_off);
+                    if (!disDisable.equals(
+                            mPreferences.getString(CameraSettings.KEY_DIS, disDisable))) {
+                        mRestartCam = true;
+                        RotateTextToast.makeText(mActivity, R.string.toast_video_ffps_disable_IS,
+                                Toast.LENGTH_LONG).show();
+                    }
+                    if (!vhdrDisable.equals(
+                            mPreferences.getString(CameraSettings.KEY_VIDEO_HDR, vhdrDisable))) {
+                        RotateTextToast.makeText(mActivity, R.string.videoffps_disable_vhdr,
+                                Toast.LENGTH_LONG).show();
+                    }
+            }
+        }
         onSharedPreferenceChanged();
     }
 
@@ -3094,6 +2851,14 @@ public class VideoModule implements CameraModule,
             } else {
                 setCameraParameters(false);
             }
+            if (mRestartCam){
+                mPendingSwitchCameraId = mCameraId;
+// Uncomment for debbuging
+//            RotateTextToast.makeText(mActivity, R.string.toast_restarting_info,
+//                                Toast.LENGTH_SHORT).show();
+                switchCamera();
+            }
+            mRestartCam = false;
             mRestartPreview = false;
             Storage.setSaveSDCard(
                 mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH, "0").equals("1"));
diff --git a/src/com/android/camera/VideoUI.java b/src/com/android/camera/VideoUI.java
index 0c1840a..e3ed38b 100755
--- a/src/com/android/camera/VideoUI.java
+++ b/src/com/android/camera/VideoUI.java
@@ -760,6 +760,34 @@ public class VideoUI implements PieRenderer.PieListener,
             return false;
     }
 
+    public boolean is1080pEnabled() {
+        if(mController != null)
+            return ((VideoModule)mController).is1080pEnabled();
+        else
+            return false;
+    }
+
+    public boolean is720pEnabled() {
+        if(mController != null)
+            return ((VideoModule)mController).is720pEnabled();
+        else
+            return false;
+    }
+
+    public boolean isHighFPSmode() {
+        if(mController != null)
+            return ((VideoModule)mController).isHighFPSmode();
+        else
+            return false;
+    }
+
+    public boolean isDISmode() {
+        if(mController != null)
+            return ((VideoModule)mController).isDISmode();
+        else
+            return false;
+    }
+
     private void popupDismissed() {
         mPopup = null;
     }
-- 
2.7.4

