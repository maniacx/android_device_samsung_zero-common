From dae0a606ed7da1c2acbf9ea179f6fb9c80d81cc2 Mon Sep 17 00:00:00 2001
From: maniacx <macs18max@gmail.com>
Date: Mon, 16 Apr 2018 15:49:56 +0400
Subject: [PATCH 1/2] healthd: Use current max and voltage max for maxcharging
 values. Using real time values change from rapid to slow indicating incorrect
 type of charger

---
 healthd/BatteryMonitor.cpp | 97 ++++++++++++++++++++++------------------------
 1 file changed, 47 insertions(+), 50 deletions(-)

diff --git a/healthd/BatteryMonitor.cpp b/healthd/BatteryMonitor.cpp
index 3308694..119182e 100644
--- a/healthd/BatteryMonitor.cpp
+++ b/healthd/BatteryMonitor.cpp
@@ -40,8 +40,6 @@
 
 #define POWER_SUPPLY_SUBSYSTEM "power_supply"
 #define POWER_SUPPLY_SYSFS_PATH "/sys/class/" POWER_SUPPLY_SUBSYSTEM
-#define SYSFS_BATTERY_CURRENT "/sys/class/power_supply/battery/current_now"
-#define SYSFS_BATTERY_VOLTAGE "/sys/class/power_supply/battery/voltage_now"
 #define FAKE_BATTERY_CAPACITY 42
 #define FAKE_BATTERY_TEMPERATURE 424
 #define ALWAYS_PLUGGED_CAPACITY 100
@@ -268,59 +266,58 @@ bool BatteryMonitor::update(void) {
             path.clear();
             path.appendFormat("%s/%s/type", POWER_SUPPLY_SYSFS_PATH, name);
             switch(BatteryMonitor::readPowerSupplyType(path)) {
-            case ANDROID_POWER_SUPPLY_TYPE_AC:
-            case ANDROID_POWER_SUPPLY_TYPE_USB:
-            case ANDROID_POWER_SUPPLY_TYPE_WIRELESS:
+            case ANDROID_POWER_SUPPLY_TYPE_BATTERY:
+                break;
+            default:
                 path.clear();
                 path.appendFormat("%s/%s/online", POWER_SUPPLY_SYSFS_PATH, name);
-                if (access(path.string(), R_OK) == 0)
+                if (access(path.string(), R_OK) == 0) {
                     mChargerNames.add(String8(name));
-                break;
-            default:
-                break;
-            }
-        }
-    }
+                    if (getIntField(path)) {
+                        path.clear();
+                        path.appendFormat("%s/%s/type", POWER_SUPPLY_SYSFS_PATH,
+                                          name);
+                        switch(readPowerSupplyType(path)) {
+                        case ANDROID_POWER_SUPPLY_TYPE_AC:
+                            props.chargerAcOnline = true;
+                            break;
+                        case ANDROID_POWER_SUPPLY_TYPE_USB:
+                            props.chargerUsbOnline = true;
+                            break;
+                        case ANDROID_POWER_SUPPLY_TYPE_WIRELESS:
+                            props.chargerWirelessOnline = true;
+                            break;
+                        default:
+                            KLOG_WARNING(LOG_TAG, "%s: Unknown power supply type\n",
+                                         name);
+                        }
+                        path.clear();
+                        path.appendFormat("%s/%s/current_max", POWER_SUPPLY_SYSFS_PATH,
+                                          name);
+                        int ChargingCurrent =
+                                       (access(path.string(), R_OK) == 0) ? getIntField(path) : 0;
 
-    for (i = 0; i < mChargerNames.size(); i++) {
-        String8 path;
-        path.appendFormat("%s/%s/online", POWER_SUPPLY_SYSFS_PATH,
-                          mChargerNames[i].string());
-        if (getIntField(path)) {
-            path.clear();
-            path.appendFormat("%s/%s/type", POWER_SUPPLY_SYSFS_PATH,
-                              mChargerNames[i].string());
-            switch(readPowerSupplyType(path)) {
-            case ANDROID_POWER_SUPPLY_TYPE_AC:
-                props.chargerAcOnline = true;
-                break;
-            case ANDROID_POWER_SUPPLY_TYPE_USB:
-                props.chargerUsbOnline = true;
-                break;
-            case ANDROID_POWER_SUPPLY_TYPE_WIRELESS:
-                props.chargerWirelessOnline = true;
+                        path.clear();
+                        path.appendFormat("%s/%s/voltage_max", POWER_SUPPLY_SYSFS_PATH,
+                                          name);
+
+                        int ChargingVoltage =
+                                       (access(path.string(), R_OK) == 0) ? getIntField(path) :
+                                          DEFAULT_VBUS_VOLTAGE;
+
+                        double power = ((double)ChargingCurrent / 1000) *
+                           ((double)ChargingVoltage / 1000);
+                        if (MaxPower < power) {
+                            props.maxChargingCurrent = ChargingCurrent * 1000;
+                            props.maxChargingVoltage = ChargingVoltage * 1000;
+                            MaxPower = power;
+                        }
+                    }
+                }
                 break;
-            default:
-                KLOG_WARNING(LOG_TAG, "%s: Unknown power supply type\n",
-                             mChargerNames[i].string());
-            }
-
-            int ChargingCurrent =
-                  (access(SYSFS_BATTERY_CURRENT, R_OK) == 0) ? abs(getIntField(String8(SYSFS_BATTERY_CURRENT))) : 0;
-
-            int ChargingVoltage =
-                  (access(SYSFS_BATTERY_VOLTAGE, R_OK) == 0) ? getIntField(String8(SYSFS_BATTERY_VOLTAGE)) :
-                   DEFAULT_VBUS_VOLTAGE;
-
-            double power = ((double)ChargingCurrent / MILLION) *
-                           ((double)ChargingVoltage / MILLION);
-            if (MaxPower < power) {
-                props.maxChargingCurrent = ChargingCurrent;
-                props.maxChargingVoltage = ChargingVoltage;
-                MaxPower = power;
-            }
-        }
-    }
+            } //switch
+        } //while
+    }//else
 
     logthis = !healthd_board_battery_update(&props);
 
-- 
2.7.4

