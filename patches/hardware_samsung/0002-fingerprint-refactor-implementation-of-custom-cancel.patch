From 20d01cd2c2e534aec19b729a43f52cf2d26fa864 Mon Sep 17 00:00:00 2001
From: Lukas0610 <mail@lukasberger.at>
Date: Mon, 18 Jun 2018 10:40:10 +0200
Subject: [PATCH 2/5] fingerprint: refactor implementation of custom
 cancel-message

  - Quite important, add comments

  - Fix possible memory leaks on multiple cancel()-calls, memory for messages
    has been allocated, but never free-ed due to possible problems if
    the notifciation is being forwarded asynchronously

  - Fix error-data whenn bauth already failed to send cancel-command to hardware:
    If ss_fingerprint_cancel() returns with an error, we shouldn't send a notification
    of a successful to Android either

Change-Id: I79dd6369f878e41a4f4058b4c19ff7cff079ebcd
---
 fingerprint/bauth/fingerprint.c | 18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

diff --git a/fingerprint/bauth/fingerprint.c b/fingerprint/bauth/fingerprint.c
index 5145de6..4ab255d 100644
--- a/fingerprint/bauth/fingerprint.c
+++ b/fingerprint/bauth/fingerprint.c
@@ -128,13 +128,29 @@ static int fingerprint_cancel(struct fingerprint_device __unused *dev)
 
     ret = bauth_handle->ss_fingerprint_cancel();
 
+    // allocate and reset message
     cancel_msg = (fingerprint_msg_t *)malloc(sizeof(fingerprint_msg_t));
     memset(cancel_msg, 0, sizeof(fingerprint_msg_t));
 
+    // mark message as error
     cancel_msg->type = FINGERPRINT_ERROR;
-    cancel_msg->data.error = FINGERPRINT_ERROR_CANCELED;
 
+    // decide upon the error-data based on the result of the cancel()-call
+    if (!ret) {
+        // let's just assume that the authentication-process was canceled successfully.
+        cancel_msg->data.error = FINGERPRINT_ERROR_CANCELED;
+    } else {
+        // if bauth already failed to send the cancel-command to hardware, we
+        // shouldn't notify the system about a successful cancel either
+        cancel_msg->data.error = FINGERPRINT_ERROR_HW_UNAVAILABLE;
+    }
+
+    // send message to system and clean up afterwards
+    // TODO: make sure that the notify is being sent synchronous, else this
+    //       could randomly lead to invalid messages
     original_notify(cancel_msg);
+    free(cancel_msg);
+
     return ret;
 }
 
-- 
2.7.4

